import subprocess
import os

def run_hmmer(protein_sequences, output_file):
    """
    Runs the HMMER tool to scan the provided protein sequences using HMM models from GyDB.
    
    Parameters:
    - protein_sequences (str): Path to the input protein sequences in FASTA format.
    - output_file (str): Path where the hmmer_results.txt should be saved.
    
    Returns:
    - None: Outputs the results to a file in the specified output path.
    """
    
    print("HMMER process started...")
    
    # Define the HMM model directory
    hmm_model_dir = 'database/GyDB'

    # Ensure the output directory exists (from the file path)
    output_dir = os.path.dirname(output_file)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Temporary file to store intermediate results
    temp_output_file = os.path.join(output_dir, "temp_hmmer_results.txt")

    # Ensure text output (avoid binary)
    if os.path.exists(temp_output_file):
        os.remove(temp_output_file)

    # Iterate through all .hmm files in the GyDB directory and run hmmpress first
    for hmm_file in os.listdir(hmm_model_dir):
        if hmm_file.endswith('.hmm'):
            hmm_file_path = os.path.join(hmm_model_dir, hmm_file)
            
            # Check if .h3m file (generated by hmmpress) exists, if not, run hmmpress
            h3m_file = hmm_file_path + ".h3m"
            if not os.path.exists(h3m_file):
                print(f"Running hmmpress on {hmm_file_path}")
                cmd_hmmpress = f"hmmpress {hmm_file_path}"
                try:
                    subprocess.run(cmd_hmmpress, shell=True, check=True)
                    print(f"hmmpress completed for {hmm_file_path}")
                except subprocess.CalledProcessError as e:
                    raise RuntimeError(f"hmmpress failed with error: {e}")

    # Iterate through all .hmm files again to run hmmscan
    for hmm_file in os.listdir(hmm_model_dir):
        if hmm_file.endswith('.hmm'):
            hmm_file_path = os.path.join(hmm_model_dir, hmm_file)
            print(f"Processing HMM file: {hmm_file_path}")
            
            # Construct the HMMER command for each HMM file and store result in a temporary file
            cmd = f"hmmscan --domtblout {temp_output_file} {hmm_file_path} {protein_sequences}"
            try:
                # Run HMMER and write the results to the temporary file
                subprocess.run(cmd, shell=True, check=True,stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                print(f"Completed HMM file: {hmm_file_path}")

                # Append the temporary results to the final output file (in text mode)
                with open(temp_output_file, 'r', encoding='utf-8') as temp_file:
                    with open(output_file, 'a', encoding='utf-8') as final_file:
                        final_file.write(temp_file.read())
                
                # Clear the temporary file for the next iteration
                with open(temp_output_file, 'w', encoding='utf-8') as temp_file:
                    temp_file.write("")

            except subprocess.CalledProcessError as e:
                raise RuntimeError(f"HMMER failed with error: {e}")
    
    # Remove the temporary file after use
    if os.path.exists(temp_output_file):
        os.remove(temp_output_file)
    
    print(f"HMMER process for {protein_sequences} finished. Results saved to {output_file}")
